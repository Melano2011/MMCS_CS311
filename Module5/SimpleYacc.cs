// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  WINDOWS-EUO6RK1
// DateTime: 10/18/2019 5:58:44 PM
// UserName: Alexander
// Input file <SimpleYacc.y - 10/18/2019 5:57:59 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,CYCLE=5,INUM=6,
    RNUM=7,ID=8,ASSIGN=9,SEMICOLON=10,MINUS=11,PLUS=12,
    MULT=13,DIVIDE=14,OPENROUND=15,CLOSEROUND=16,IF=17,ELSE=18,
    THEN=19};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<int,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public int yylval;
  public LexLocation yylloc;
  public ScanObj( int t, int val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public class Parser: ShiftReduceParser<int, LexLocation>
{
  // Verbatim content from SimpleYacc.y - 10/18/2019 5:57:59 PM
// Ýòè îáúÿâëåíèÿ äîáàâëÿþòñÿ â êëàññ GPPGParser, ïðåäñòàâëÿþùèé ñîáîé ïàðñåð, ãåíåðèðóåìûé ñèñòåìîé gppg
    public Parser(AbstractScanner<int, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y - 10/18/2019 5:57:59 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[26];
  private static State[] states = new State[44];
  private static string[] nonTerms = new string[] {
      "progr", "$accept", "block", "stlist", "statement", "assign", "cycle", 
      "if", "ident", "expr", "e1", "e2", "e3", };

  static Parser() {
    states[0] = new State(new int[]{3,4},new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{8,19,3,4,5,33,17,37},new int[]{-4,5,-5,43,-6,9,-9,10,-3,31,-7,32,-8,36});
    states[5] = new State(new int[]{4,6,10,7});
    states[6] = new State(-24);
    states[7] = new State(new int[]{8,19,3,4,5,33,17,37},new int[]{-5,8,-6,9,-9,10,-3,31,-7,32,-8,36});
    states[8] = new State(-4);
    states[9] = new State(-5);
    states[10] = new State(new int[]{9,11});
    states[11] = new State(new int[]{8,19,6,20,7,21,15,22},new int[]{-10,12,-11,13,-12,25,-13,28,-9,18});
    states[12] = new State(-10);
    states[13] = new State(new int[]{12,14,11,29,4,-11,10,-11,18,-11,16,-11,8,-11,3,-11,5,-11,17,-11,19,-11});
    states[14] = new State(new int[]{8,19,6,20,7,21,15,22},new int[]{-12,15,-13,28,-9,18});
    states[15] = new State(new int[]{13,16,14,26,12,-13,11,-13,4,-13,10,-13,18,-13,16,-13,8,-13,3,-13,5,-13,17,-13,19,-13});
    states[16] = new State(new int[]{8,19,6,20,7,21,15,22},new int[]{-13,17,-9,18});
    states[17] = new State(-16);
    states[18] = new State(-18);
    states[19] = new State(-9);
    states[20] = new State(-19);
    states[21] = new State(-20);
    states[22] = new State(new int[]{8,19,6,20,7,21,15,22},new int[]{-10,23,-11,13,-12,25,-13,28,-9,18});
    states[23] = new State(new int[]{16,24});
    states[24] = new State(-21);
    states[25] = new State(new int[]{13,16,14,26,12,-12,11,-12,4,-12,10,-12,18,-12,16,-12,8,-12,3,-12,5,-12,17,-12,19,-12});
    states[26] = new State(new int[]{8,19,6,20,7,21,15,22},new int[]{-13,27,-9,18});
    states[27] = new State(-17);
    states[28] = new State(-15);
    states[29] = new State(new int[]{8,19,6,20,7,21,15,22},new int[]{-12,30,-13,28,-9,18});
    states[30] = new State(new int[]{13,16,14,26,12,-14,11,-14,4,-14,10,-14,18,-14,16,-14,8,-14,3,-14,5,-14,17,-14,19,-14});
    states[31] = new State(-6);
    states[32] = new State(-7);
    states[33] = new State(new int[]{8,19,6,20,7,21,15,22},new int[]{-10,34,-11,13,-12,25,-13,28,-9,18});
    states[34] = new State(new int[]{8,19,3,4,5,33,17,37},new int[]{-5,35,-6,9,-9,10,-3,31,-7,32,-8,36});
    states[35] = new State(-25);
    states[36] = new State(-8);
    states[37] = new State(new int[]{8,19,6,20,7,21,15,22},new int[]{-10,38,-11,13,-12,25,-13,28,-9,18});
    states[38] = new State(new int[]{19,39});
    states[39] = new State(new int[]{8,19,3,4,5,33,17,37},new int[]{-5,40,-6,9,-9,10,-3,31,-7,32,-8,36});
    states[40] = new State(new int[]{18,41,4,-22,10,-22});
    states[41] = new State(new int[]{8,19,3,4,5,33,17,37},new int[]{-5,42,-6,9,-9,10,-3,31,-7,32,-8,36});
    states[42] = new State(-23);
    states[43] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-4, new int[]{-5});
    rules[4] = new Rule(-4, new int[]{-4,10,-5});
    rules[5] = new Rule(-5, new int[]{-6});
    rules[6] = new Rule(-5, new int[]{-3});
    rules[7] = new Rule(-5, new int[]{-7});
    rules[8] = new Rule(-5, new int[]{-8});
    rules[9] = new Rule(-9, new int[]{8});
    rules[10] = new Rule(-6, new int[]{-9,9,-10});
    rules[11] = new Rule(-10, new int[]{-11});
    rules[12] = new Rule(-11, new int[]{-12});
    rules[13] = new Rule(-11, new int[]{-11,12,-12});
    rules[14] = new Rule(-11, new int[]{-11,11,-12});
    rules[15] = new Rule(-12, new int[]{-13});
    rules[16] = new Rule(-12, new int[]{-12,13,-13});
    rules[17] = new Rule(-12, new int[]{-12,14,-13});
    rules[18] = new Rule(-13, new int[]{-9});
    rules[19] = new Rule(-13, new int[]{6});
    rules[20] = new Rule(-13, new int[]{7});
    rules[21] = new Rule(-13, new int[]{15,-10,16});
    rules[22] = new Rule(-8, new int[]{17,-10,19,-5});
    rules[23] = new Rule(-8, new int[]{17,-10,19,-5,18,-5});
    rules[24] = new Rule(-3, new int[]{3,-4,4});
    rules[25] = new Rule(-7, new int[]{5,-10,-5});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
